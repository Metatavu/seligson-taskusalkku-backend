# coding: utf-8

from typing import Dict, List, Union  # noqa: F401
from abc import ABC, abstractmethod

from fastapi import (  # noqa: F401
    APIRouter,
    Body,
    Cookie,
    Depends,
    Form,
    Header,
    Path,
    Query,
    Response,
    Security,
    status,
)

from fastapi_utils.cbv import cbv
from fastapi_utils.inferring_router import InferringRouter

from sqlalchemy.orm import Session

from {{modelPackage}}.extra_models import TokenModel  # noqa: F401
{{#imports}}
{{import}}
{{/imports}}
{{#securityImports.0}}from impl.security_api import {{#securityImports}}get_token_{{.}}{{^-last}}, {{/-last}}{{/securityImports}}{{/securityImports.0}}
from db.database import SessionLocal

router = APIRouter()
router = InferringRouter()


# Dependency
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


@cbv(router)
class {{classname}}Spec(ABC):
    {{#operations}}{{#operation}}
    @abstractmethod
    async def {{operationId}}(
        self,
        {{#allParams}}
        {{>endpoint_argument_definition}},
        {{/allParams}}
        {{#hasAuthMethods}}
        {{#authMethods}}
        token_{{name}}: TokenModel = Security(
            get_token_{{name}}{{#isOAuth}}, scopes=[{{#scopes}}"{{scope}}"{{^-last}}, {{/-last}}{{/scopes}}]{{/isOAuth}}
        ),
        {{/authMethods}}
        {{/hasAuthMethods}}
        db: Session = Depends(get_db),
    ) -> {{returnType}}{{^returnType}}None{{/returnType}}:
        ...

    @router.{{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}(
        "{{path}}",
        responses={
            {{#responses}}
            {{code}}: {{=<% %>=}}{<%#dataType%>"model": <%dataType%>, "description": "<%message%>"<%/dataType%><%^dataType%>"description": "<%message%>"<%/dataType%>}<%={{ }}=%>,
            {{/responses}}
        },
        tags=[{{#tags}}"{{name}}"{{^-last}},{{/-last}}{{/tags}}],
        {{#summary}}
        summary="{{.}}",
        {{/summary}}
        {{#description}}
        description = "{{.}}",
        {{/description}}
    )
    async def {{operationId}}_spec(
        self,
        {{#allParams}}
        {{>endpoint_argument_definition}},
        {{/allParams}}
        {{#hasAuthMethods}}
        {{#authMethods}}
        token_{{name}}: TokenModel = Security(
            get_token_{{name}}{{#isOAuth}}, scopes=[{{#scopes}}"{{scope}}"{{^-last}}, {{/-last}}{{/scopes}}]{{/isOAuth}}
        ),
        {{/authMethods}}
        {{/hasAuthMethods}}
        db: Session = Depends(get_db),
    ) -> {{returnType}}{{^returnType}}None{{/returnType}}:
        {{#notes}}"""{{.}}"""{{/notes}}{{^notes}}...{{/notes}}
        return await self.{{operationId}}(
            {{#allParams}}{{#isPathParam}}{{baseName}}{{/isPathParam}}{{^isPathParam}}{{paramName}}{{/isPathParam}}{{^-last}},
            {{/-last}}{{/allParams}}{{#hasParams}},
            {{/hasParams}}{{#hasAuthMethods}}{{#authMethods}}token_{{name}},{{^-last}},
            {{/-last}}{{/authMethods}}{{/hasAuthMethods}}
            db,
        )
    {{^-last}}
    {{/-last}}{{/operation}}{{/operations}}