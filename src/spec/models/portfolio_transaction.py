# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, validator  # noqa: F401
from spec.models.transaction_type import TransactionType


class PortfolioTransaction(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    PortfolioTransaction - a model defined in OpenAPI

        id: The id of this PortfolioTransaction [Optional].
        securityId: The securityId of this PortfolioTransaction [Optional].
        targetSecurityId: The targetSecurityId of this PortfolioTransaction [Optional].
        transactionType: The transactionType of this PortfolioTransaction.
        valueDate: The valueDate of this PortfolioTransaction.
        value: The value of this PortfolioTransaction.
        shareAmount: The shareAmount of this PortfolioTransaction.
        marketValue: The marketValue of this PortfolioTransaction.
        totalValue: The totalValue of this PortfolioTransaction.
        paymentDate: The paymentDate of this PortfolioTransaction.
        provision: The provision of this PortfolioTransaction.
    """
    id: Optional[str] = None
    securityId: Optional[str] = None
    targetSecurityId: Optional[str] = None
    transactionType: TransactionType
    valueDate: date
    value: str
    shareAmount: str
    marketValue: str
    totalValue: str
    paymentDate: date
    provision: str

    @classmethod
    @validator("value")
    def value_pattern(cls, value):
        assert value is not None and re.match(r"^[+-]?([0-9]+\.?[0-9]*|\.[0-9]+)$", value)
        return value

    @classmethod
    @validator("share_amount")
    def share_amount_pattern(cls, value):
        assert value is not None and re.match(r"^[+-]?([0-9]+\.?[0-9]*|\.[0-9]+)$", value)
        return value

    @classmethod
    @validator("market_value")
    def market_value_pattern(cls, value):
        assert value is not None and re.match(r"^[+-]?([0-9]+\.?[0-9]*|\.[0-9]+)$", value)
        return value

    @classmethod
    @validator("total_value")
    def total_value_pattern(cls, value):
        assert value is not None and re.match(r"^[+-]?([0-9]+\.?[0-9]*|\.[0-9]+)$", value)
        return value

    @classmethod
    @validator("provision")
    def provision_pattern(cls, value):
        assert value is not None and re.match(r"^[+-]?([0-9]+\.?[0-9]*|\.[0-9]+)$", value)
        return value


PortfolioTransaction.update_forward_refs()
